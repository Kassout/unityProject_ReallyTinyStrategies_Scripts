using System;
using Mirror;
using UnityEngine;

/// <summary>
/// Class <c>ResourceGenerator</c> is a Mirror component script used to manage the resources generator behaviour of the game.
/// </summary>
[RequireComponent(typeof(Transform), typeof(Building))]
public class ResourceGenerator : NetworkBehaviour
{
    /// <summary>
    /// Instance variable <c>health</c> is a Mirror <c>Health</c> component representing the health manager of the resources generator building.
    /// </summary>
    private Health _health;
    
    /// <summary>
    /// Instance variable <c>resourcesPerInterval</c> represents the resources quantity value generated by the building at each interval.
    /// </summary>
    private int _resourcesPerInterval;
    
    /// <summary>
    /// Instance variable <c>interval</c> represents the interval time value between two resources generation.
    /// </summary>
    private float _interval;

    /// <summary>
    /// Instance variable <c>timer</c> represents the time measurement value since last resource generation.
    /// </summary>
    private float _timer;
    
    /// <summary>
    /// Instance variable <c>player</c> is a Unity <c>RTSPlayer</c> component representing the player general manager.
    /// </summary>
    private RTSPlayer _player;

    /// <summary>
    /// This function is called when the script instance is being loaded.
    /// </summary>
    private void Awake()
    {
        _health = GetComponent<Health>();
        
        BuildingData buildingData = GetComponent<Building>().buildingData;

        _interval = buildingData.interval;
        _resourcesPerInterval = buildingData.resourcesPerInterval;
    }

    /// <summary>
    /// This function is invoked for NetworkBehaviour objects when they become active on the server.
    /// </summary>
    public override void OnStartServer()
    {
        _timer = _interval;
        _player = connectionToClient.identity.GetComponent<RTSPlayer>();

        _health.ServerOnDeath += ServerHandleDeath;
        GameOverHandler.ServerOnGameOver += ServerHandleGameOver;
    }

    /// <summary>
    /// This function is called for NetworkBehaviour objects when they become inactive on the server.
    /// </summary>
    public override void OnStopServer()
    {
        _health.ServerOnDeath -= ServerHandleDeath;
        GameOverHandler.ServerOnGameOver -= ServerHandleGameOver;
    }

    /// <summary>
    /// This function is called every frame, if the MonoBehaviour is enabled.
    /// </summary>
    [ServerCallback]
    private void Update()
    {
        _timer -= Time.deltaTime;

        if (_timer <= 0)
        {
            _player.SetResources(_player.GetResources() + _resourcesPerInterval);
            
            _timer += _interval;
        }
    }

    /// <summary>
    /// This function is responsible for destroying the instance of the resource generator building.
    /// </summary>
    [Server]
    private void ServerHandleDeath()
    {
        NetworkServer.Destroy(gameObject);
    }

    /// <summary>
    /// This server side function is responsible for disabling resource generator from the building for a player who lose.
    /// </summary>
    [Server]
    private void ServerHandleGameOver()
    {
        enabled = false;
    }
}
